#pragma once
#include "DivePch.h"

namespace Dive
{
	enum class eRenderResourceFormat : uint8_t
	{
		UNKNOWN					= DXGI_FORMAT_UNKNOWN,
		R8_UNORM				= DXGI_FORMAT_R8_UNORM,
		RG8_UNORM				= DXGI_FORMAT_R8G8_UNORM,
		RG8_SNORM				= DXGI_FORMAT_R8G8_SNORM,
		RGBA8_UNORM				= DXGI_FORMAT_R8G8B8A8_UNORM,
		RG11B10_FLOAT			= DXGI_FORMAT_R11G11B10_FLOAT,
		R16_FLOAT				= DXGI_FORMAT_R16_FLOAT,
		R16_UNORM				= DXGI_FORMAT_R16_UNORM,
		RG16_FLOAT				= DXGI_FORMAT_R16G16_FLOAT,
		RG16_UNORM				= DXGI_FORMAT_R16G16_UNORM,
		RGBA16_FLOAT			= DXGI_FORMAT_R16G16B16A16_FLOAT,
		RGBA16_UNORM			= DXGI_FORMAT_R16G16B16A16_UNORM,
		R32_FLOAT				= DXGI_FORMAT_R32_FLOAT,
		RG32_FLOAT				= DXGI_FORMAT_R32G32_FLOAT,
		RGB32_FLOAT				= DXGI_FORMAT_R32G32B32_FLOAT,
		RGBA32_FLOAT			= DXGI_FORMAT_R32G32B32A32_FLOAT,
		R32_UINT				= DXGI_FORMAT_R32_UINT,
		RG32_UINT				= DXGI_FORMAT_R32G32_UINT,
		RGB32_UINT				= DXGI_FORMAT_R32G32B32_UINT,
		RGBA32_UINT				= DXGI_FORMAT_R32G32B32A32_UINT,
		D16_UNORM				= DXGI_FORMAT_D16_UNORM,
		R24G8_TYPELESS			= DXGI_FORMAT_R24G8_TYPELESS,
		D24_UNORM_S8_UINT		= DXGI_FORMAT_D24_UNORM_S8_UINT,
		R24_UNORM_X8_TYPELESS	= DXGI_FORMAT_R24_UNORM_X8_TYPELESS,
		D32_FLOAT				= DXGI_FORMAT_D32_FLOAT,
		R32_TYPELESS			= DXGI_FORMAT_R32_TYPELESS,
		BC2_UNORM				= DXGI_FORMAT_BC2_UNORM
	};

	enum class eIndexBufferFormat : uint8_t
	{
		UINT16 = DXGI_FORMAT_R16_UINT,
		UINT32 = DXGI_FORMAT_R32_UINT
	};

	enum class ePrimitiveTopology : uint8_t
	{
		POINT_LIST		= D3D_PRIMITIVE_TOPOLOGY_POINTLIST,
		LINE_LIST		= D3D_PRIMITIVE_TOPOLOGY_LINELIST,
		LINE_STRIP		= D3D_PRIMITIVE_TOPOLOGY_LINESTRIP,
		TRIANGLE_LIST	= D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST,
		TRIANGLE_STRIP	= D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP
	};

	enum class eTextureFilter : uint8_t
	{
		MIN_MAG_MIP_POINT				= D3D11_FILTER_MIN_MAG_MIP_POINT,
		MIN_MAG_POINT_MIP_LINEAR		= D3D11_FILTER_MIN_MAG_POINT_MIP_LINEAR,
		MIN_POINT_MAG_LINEAR_MIP_POINT	= D3D11_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT,
		MIN_POINT_MAG_MIP_LINEAR		= D3D11_FILTER_MIN_POINT_MAG_MIP_LINEAR,
		MIN_LINEAR_MAG_MIP_POINT		= D3D11_FILTER_MIN_LINEAR_MAG_MIP_POINT,
		MIN_LINEAR_MAG_POINT_MIP_LINEAR	= D3D11_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR,
		MIN_MAG_LINEAR_MIP_POINT		= D3D11_FILTER_MIN_MAG_LINEAR_MIP_POINT,
		MIN_MAG_MIP_LINEAR				= D3D11_FILTER_MIN_MAG_MIP_LINEAR,
		ANISOTROPIC						= D3D11_FILTER_ANISOTROPIC,

		COMPARISON_MIN_MAG_MIP_POINT				= D3D11_FILTER_COMPARISON_MIN_MAG_MIP_POINT,
		COMPARISON_MIN_MAG_POINT_MIP_LINEAR			= D3D11_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR,
		COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT	= D3D11_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT,
		COMPARISON_MIN_POINT_MAG_MIP_LINEAR			= D3D11_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR,
		COMPARISON_MIN_LINEAR_MAG_MIP_POINT			= D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT,
		COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR	= D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR,
		COMPARISON_MIN_MAG_LINEAR_MIP_POINT			= D3D11_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT,
		COMPARISON_MIN_MAG_MIP_LINEAR				= D3D11_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR,
		COMPARISON_ANISOTROPIC						= D3D11_FILTER_COMPARISON_ANISOTROPIC,
	};

	enum class eTextureAddressMode : uint8_t
	{
		WRAP	= D3D11_TEXTURE_ADDRESS_WRAP,
		MIRROR	= D3D11_TEXTURE_ADDRESS_MIRROR,
		CLAMP	= D3D11_TEXTURE_ADDRESS_CLAMP,
	};

	enum class eMapType : uint8_t
	{

	};
	/*
	enum class eShaderType : uint8_t
	{
		VERTEX_SHADER		= 1 << 0,
		HULL_SHADER			= 1 << 1,
		DOMAIN_SHADER		= 1 << 2,
		GEOMETRY_SHADER		= 1 << 3,
		PIXEL_SHADER		= 1 << 4,
		COMPUTE_SHADER		= 1 << 5
	};
	*/
	enum class eBufferBindFlag : uint8_t
	{

	};

	// 뭔지 모르겠다.
	enum class eBufferType : uint8_t
	{

	};

	// 역시 뭔지 모르겠지만 일단 추가
	enum class eUpdateType : uint8_t
	{
		NONE	= 0,
		CPU		= 1,
		GPU		= 2
	};
}

Spartan's ResourceManager
- vector<shared_ptr<IResource>>로 m_resources를 관리한다.
	- 즉, Resource 구체 Type을 구분하여 관리하진 않는다.
- Directory를 관리한다.
	- 전체, 타입별로 관리한다.
- Engine Format File로부터 생성된 Resource 객체만 관리한다.
	- Load(filepath)로부터 생성한 후 Cache()를 통해 저장한다.
- ResourceFile
	- SaveResourcesToFiles: m_resources의 타입과 경로를 _resources.dat라는 파일로 저장한다.
	- LoadResourcesFromFiles: _resources.dat를 읽어 m_resources를 구성한다.
	- 둘 다 사용하는 코드를 찾지 못했다.
		- Scene 관리에 사용할 수 있을 것 같다.
	- Reosurce File의 Path는 해당 IResource에서 관리한다.
- 나머지 함수들로는 IsCached(), Get(), Remove() 등이 있다.


Cache
- IResource 구체 객체 생성 주체
	- ResourceManager
		- ::Load()에서 구체 객체 생성 및 IReosurce::LoadFromFile() 후 Cache()를 호출한다.
		- 대상 Texture2D
			- Renderer::UseDefaultMaterial()의 no_texture.png
			- Material::LoadFromFile()에서 Materials
	- 외부
		- 구체 객체를 생성한 후 상황에 맞춰 ReosurceManager::Cache()에 전달한다.
			- Texture2D의 경우 generateMips 설정 후 직접 LoadFromFile()로 Resource를 생성을 마치면 ResourceManager::Cache()를 수행한다.
		- 대상 Texture2D
			- Model::AddTexture()에서 Cache 체크에 실패하면 직접 생성 후 Cache한다.
- 기타
	- GBuffer용 RenderTargetTexture들은 직접 생성만 할 뿐 Cache하지 않는다.
	=> 결국 dvTexture2D는 Cache대상이고 dvRenderTexture는 아니다로 정리할 수 있다.


생각해 볼 사항
- Pass를 어디에 만드느냐?!


Unity에서의 RenderPath와 Pass
: 참고(https://forum.unity.com/threads/what-is-a-render-pass-in-simple-words.715004/)
- Render Path & Pipeline
	- Render Path
		- Forward, Deferred
		- Black box 구현
	- Render Pipeline
		- LightWeight(LWRP = Universal), HighDefinition(HDRP)
		- C#으로 구현되어 있으며 수정 가능
	- 즉, 여기에서 Pipeline은 Path 이후 더 발전된 형태의 Rendering 구현을 일컫는 용어이다.
- Pass
	- Shader Pass
		- ID3DXEffect의 Pass와 유사하다.
		- State, Vertex & Pixel Shader 등으로 구성
	- Render Pass
		- Render Target에 그리는 하나의 단위를 의미하는 것 같다.
		- 설명에서는 카메라 깊이 텍스쳐, 그림자 맵 생성 등을 언급한다.

RenderPass
	- Spartan
		- Pass_XXX()로 구현한다.
		- 내부에서 오브젝트를 구분하고 각종 리소스를 Bind한 후 Draw를 호출하여 그린다.
			- RenderTarget 역시 Set & Clear한다.
		- 이러한 묶음으로 GBuffer, Post Proecssing을 구현한다.
	- Wicked
		- RenderPath에서 관리한다.
		- RenderTarget의 묶음같다.
			- Resource를 생성할 때 같이 구성한다.
		- GraphicsDevice::RenderPassBegin()에 전달하여 Set & Clear를 수행한다.
			- GraphicsDevice::RenderPassEnd()에 전달하여 Set을 해제한다.
			- 이 부분들을 구현하려면 RenderPath의 Base가 좋을 것 같다.
	- 결국 그려지는 행위 자체 그리고 그려지는 장소(Target Texture)를 기준으로 Pass를 나누었다고 볼 수 있다.